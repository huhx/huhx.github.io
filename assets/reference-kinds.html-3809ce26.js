import{_ as a,o as e,c as n,d as s}from"./app-57542e83.js";const r={},d=s(`<p>在Java中提供了4个级别的引用：强引用、软引用、弱引用和虚引用。之所以整出这么多的引用类型，是因为引用也有轻重缓急，分门别类有助于GC更好的进行垃圾回收。下面我们就来具体看下这些引用类型。</p><h2 id="强引用" tabindex="-1"><a class="header-anchor" href="#强引用" aria-hidden="true">#</a> 强引用</h2><p>强引用就是程序中一般使用的引用类型，强引用的对象是可触及的，不会被回收。下面是一个强引用的例子</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Object</span> object <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>强引用具备以下特点：</p><ul><li>强引用可以直接访问目标对象</li><li>强引用所指向的对象在任何时候都不会被系统回收，虚拟机宁愿抛出OOM异常，也不会回收强引用所指向的对象</li><li>强引用可能导致内存泄露</li></ul><h2 id="软引用" tabindex="-1"><a class="header-anchor" href="#软引用" aria-hidden="true">#</a> 软引用</h2><p>如果一个对象只持有软引用，那么当堆空间不足时，就会被回收。软引用使用<code>java.lang.ref.SoftReference</code>类实现。</p><h2 id="弱引用" tabindex="-1"><a class="header-anchor" href="#弱引用" aria-hidden="true">#</a> 弱引用</h2><p>在系统GC时，只要发现弱引用，不管系统堆空间使用情况如何，都会将对象进行回收。但是，由于垃圾回收器的线程通常优先级很低，并不一定能很快地发现持有弱引用的对象。在这种情况下，弱引用对象可以存在较长的时间。</p><p>一旦一个弱引用对象被垃圾回收器回收，便会加入一个注册的引用队列。弱引用使用<code>java.lang.ref.WeakReference</code>类实现。</p><h2 id="虚引用" tabindex="-1"><a class="header-anchor" href="#虚引用" aria-hidden="true">#</a> 虚引用</h2><p>虚引用是所有引用类型中最弱的一个。一个持有虚引用的对象，和没有引用几乎是一样的，随时都可能被垃圾回收器回收。当试图通过虚引用的<code>get()</code>方法取得强引用时，总会失败。并且，虚引用必须和引用队列一起使用，它的作用在于跟踪垃圾回收过程。</p><p>当垃圾回收器准备回收一个对象时，如果发现它还有虚引用，就会在回收对象后，将这个虚引用加入引用队列，以通知应用程序对象的回收情况。</p><h2 id="faq" tabindex="-1"><a class="header-anchor" href="#faq" aria-hidden="true">#</a> FAQ</h2><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考" aria-hidden="true">#</a> 参考</h2>`,17),c=[d];function i(t,h){return e(),n("div",null,c)}const l=a(r,[["render",i],["__file","reference-kinds.html.vue"]]);export{l as default};
