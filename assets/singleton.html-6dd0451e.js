const n=JSON.parse('{"key":"v-5acdfbdf","path":"/java/thread/singleton.html","title":"线程安全的单例模式","lang":"en-US","frontmatter":{"title":"线程安全的单例模式","date":"2023-09-01T00:00:00.000Z","category":"java","tag":["Thread","Concurrency"]},"headers":[{"level":2,"title":"单例模式","slug":"单例模式","link":"#单例模式","children":[{"level":3,"title":"饿汉模式","slug":"饿汉模式","link":"#饿汉模式","children":[]},{"level":3,"title":"懒汉模式","slug":"懒汉模式","link":"#懒汉模式","children":[]},{"level":3,"title":"延迟加载解决方案之声明synchronized","slug":"延迟加载解决方案之声明synchronized","link":"#延迟加载解决方案之声明synchronized","children":[]},{"level":3,"title":"延迟加载解决方案之同步代码块","slug":"延迟加载解决方案之同步代码块","link":"#延迟加载解决方案之同步代码块","children":[]},{"level":3,"title":"延迟加载解决方案之同步部分代码块","slug":"延迟加载解决方案之同步部分代码块","link":"#延迟加载解决方案之同步部分代码块","children":[]},{"level":3,"title":"延迟加载解决方案之DCL双检查锁机制","slug":"延迟加载解决方案之dcl双检查锁机制","link":"#延迟加载解决方案之dcl双检查锁机制","children":[]}]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]},{"level":2,"title":"FAQ","slug":"faq","link":"#faq","children":[]},{"level":2,"title":"参考","slug":"参考","link":"#参考","children":[]}],"git":{"createdTime":1694501966000,"updatedTime":1694501966000},"readingTime":{"minutes":2.61,"words":782},"filePathRelative":"java/thread/singleton.md","localizedDate":"September 1, 2023","excerpt":"<p>单例模式是设计模式中使用最为普遍的模式之一。它是一种对象创建模式，用于产生一个对象的具体实例，它可以确保系统中一个类只产生一个实例。单例与多线程没啥直接关系，但是保证多线程下单例模式的安全性，是件有趣且好玩的事情。今天我们就来聊聊这单例。</p>\\n<h2> 单例模式</h2>\\n<h3> 饿汉模式</h3>\\n<div class=\\"language-java line-numbers-mode\\" data-ext=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">Singleton</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">private</span> <span class=\\"token keyword\\">final</span> <span class=\\"token keyword\\">static</span> <span class=\\"token class-name\\">Singleton</span> <span class=\\"token constant\\">INSTANCE</span> <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">Singleton</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token keyword\\">private</span> <span class=\\"token class-name\\">Singleton</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span><span class=\\"token punctuation\\">}</span>\\n    \\n    <span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">static</span> <span class=\\"token class-name\\">Singleton</span> <span class=\\"token function\\">getInstance</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">return</span> <span class=\\"token constant\\">INSTANCE</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","copyright":{"author":"huhx","license":"MIT"}}');export{n as data};
