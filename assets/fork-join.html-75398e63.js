const e=JSON.parse('{"key":"v-7a32be94","path":"/java/concurrency/fork-join.html","title":"分而治之Fork/Join","lang":"en-US","frontmatter":{"title":"分而治之Fork/Join","date":"2023-09-08T00:00:00.000Z","category":"java","tag":["Concurrency-Toolkit","Concurrency"]},"headers":[{"level":2,"title":"使用","slug":"使用","link":"#使用","children":[]},{"level":2,"title":"分析","slug":"分析","link":"#分析","children":[]},{"level":2,"title":"FAQ","slug":"faq","link":"#faq","children":[]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]},{"level":2,"title":"参考","slug":"参考","link":"#参考","children":[]}],"git":{"createdTime":1694501966000,"updatedTime":1694501966000},"readingTime":{"minutes":0.39,"words":117},"filePathRelative":"java/concurrency/fork-join.md","localizedDate":"September 8, 2023","excerpt":"<p>在多核处理器时代，</p>\\n<h2> 使用</h2>\\n<h2> 分析</h2>\\n<h2> FAQ</h2>\\n<h2> 总结</h2>\\n<ul>\\n<li>Fork/Join是一种基于分治的算法：通过分解任务，并行执行，最后合并结果得到最终结果</li>\\n<li><code>ForkJoinPool</code>线程池可以把一个大任务分拆成小任务并行执行，任务类必须继承自<code>RecursiveTask</code>或<code>RecursiveAction</code></li>\\n<li>使用Fork/Join模式可以进行并行计算以提高效率</li>\\n</ul>\\n<h2> 参考</h2>","copyright":{"author":"huhx","license":"MIT"}}');export{e as data};
