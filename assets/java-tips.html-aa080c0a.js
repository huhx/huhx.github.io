import{_ as l,r as i,o as u,c as d,e as p,w as s,b as a,d as o,a as n}from"./app-57542e83.js";const r="/assets/202308042241208141143-4ea1c43b.png",k={},v=o('<p>如何编写更健壮更好的java代码？这里面整理收集一些在java开发过程中我们需要注意的一些点或者说是技巧，从而提高代码的质量以及我们的工作效率。</p><h2 id="springboot" tabindex="-1"><a class="header-anchor" href="#springboot" aria-hidden="true">#</a> Springboot</h2><h3 id="ignore-null-fields-with-jackson" tabindex="-1"><a class="header-anchor" href="#ignore-null-fields-with-jackson" aria-hidden="true">#</a> Ignore Null Fields with Jackson</h3><p>springboot中默认序列化Json的框架就是<code>jackson</code>了，这里面介绍在springboot项目中如何忽略null字段</p><ul><li>全局</li></ul><p>springboot配置和java代码都可以实现全局忽略null的功能</p>',6),m=n("div",{class:"language-yaml line-numbers-mode","data-ext":"yml"},[n("pre",{class:"language-yaml"},[n("code",null,[n("span",{class:"token key atrule"},"spring"),n("span",{class:"token punctuation"},":"),a(`
  `),n("span",{class:"token key atrule"},"jackson"),n("span",{class:"token punctuation"},":"),a(`
    `),n("span",{class:"token key atrule"},"default-property-inclusion"),n("span",{class:"token punctuation"},":"),a(` non_null
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),b=n("div",{class:"language-java line-numbers-mode","data-ext":"java"},[n("pre",{class:"language-java"},[n("code",null,[n("span",{class:"token keyword"},"var"),a(" mapper "),n("span",{class:"token operator"},"="),a(),n("span",{class:"token keyword"},"new"),a(),n("span",{class:"token class-name"},"ObjectMapper"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),a(`

mapper`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"setSerializationInclusion"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"Include"),n("span",{class:"token punctuation"},"."),n("span",{class:"token constant"},"NON_NULL"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),a(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),g=o(`<ul><li>类级别</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@JsonInclude</span><span class="token punctuation">(</span><span class="token class-name">Include</span><span class="token punctuation">.</span><span class="token constant">NON_NULL</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>字段级别</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyPersonDto</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@JsonInclude</span><span class="token punctuation">(</span><span class="token class-name">Include</span><span class="token punctuation">.</span><span class="token constant">NON_NULL</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> address<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="java-record类不能用作jpa实体" tabindex="-1"><a class="header-anchor" href="#java-record类不能用作jpa实体" aria-hidden="true">#</a> Java record类不能用作JPA实体</h3><p>A JPA entity class must:</p><div class="language-txt line-numbers-mode" data-ext="txt"><pre class="language-txt"><code>🔘 be non-final 
🔘 have a no-arg constructor 
🔘 have non-final fields
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>A Record:</p><div class="language-txt line-numbers-mode" data-ext="txt"><pre class="language-txt"><code>❌ is final 
❌ has one constructor with all fields
❌ has final fields
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="docker" tabindex="-1"><a class="header-anchor" href="#docker" aria-hidden="true">#</a> Docker</h2><h3 id="docker远程debug" tabindex="-1"><a class="header-anchor" href="#docker远程debug" aria-hidden="true">#</a> docker远程Debug</h3><ul><li>使用docker部署项目</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 9094: 应用端口, 5005: 远程debug的端口，需要远程的服务器防火墙打开此接口</span>
<span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">-p</span> <span class="token number">9094</span>:9094 <span class="token parameter variable">-p</span> <span class="token number">5005</span>:5005 <span class="token punctuation">\\</span>
<span class="token parameter variable">-e</span> <span class="token string">&quot;JAVA_TOOL_OPTIONS=<span class="token entity" title="\\&quot;">\\&quot;</span>-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5005<span class="token entity" title="\\&quot;">\\&quot;</span>&quot;</span> <span class="token punctuation">\\</span>
<span class="token parameter variable">--name</span> demo_app demo_app:0.0.1-SNAPSHOT
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>检查远程接口是否打开</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">nc</span> <span class="token parameter variable">-vz</span> <span class="token number">47.111</span>.12.18 <span class="token number">5005</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>输出的日志中带有<code>Connection to .... successed</code>就代表远程的5005接口是可以连通的。</p><ul><li>intellj配置<code>Remote Jvm Debug</code></li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># import thing is the JVM arguments</span>
<span class="token parameter variable">-agentlib:jdwp</span><span class="token operator">=</span>transport<span class="token operator">=</span>dt_socket,server<span class="token operator">=</span>y,suspend<span class="token operator">=</span>n,address<span class="token operator">=</span>*:5005
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+r+'" alt="debug配置" tabindex="0" loading="lazy"><figcaption>debug配置</figcaption></figure><blockquote><p>本地和远程的源代码要保持一致，要不然本地的debug会不能工作。</p></blockquote><ul><li>运行测试</li></ul><p>本地代码打上断点，在idea上面点击<code>server debug</code>以<code>debug</code>模式运行。访问远程的api，就会走到本地相应的断点。</p><h2 id="standard" tabindex="-1"><a class="header-anchor" href="#standard" aria-hidden="true">#</a> Standard</h2><h3 id="boolean的短路评估" tabindex="-1"><a class="header-anchor" href="#boolean的短路评估" aria-hidden="true">#</a> Boolean的短路评估</h3><ul><li><p><code>&amp;&amp;</code>: If the left operand is false, the right one isn’t called.</p></li><li><p><code>||</code>: If the left operand is true, the right one isn’t called.</p></li></ul><p>利用这个特性的话，在编写代码就可以通过变换表达式的位置或者提取方法来优化性能，比如</p>',26),h=n("div",{class:"language-java line-numbers-mode","data-ext":"java"},[n("pre",{class:"language-java"},[n("code",null,[n("span",{class:"token keyword"},"public"),a(),n("span",{class:"token keyword"},"boolean"),a(" shouldSkip "),n("span",{class:"token punctuation"},"{"),a(`
    `),n("span",{class:"token keyword"},"var"),a(" hasOutput "),n("span",{class:"token operator"},"="),a(),n("span",{class:"token class-name"},"CollectionUtils"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"isNotEmpty"),n("span",{class:"token punctuation"},"("),a("response"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"getSpec"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"getOutputs"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),a(`
    `),n("span",{class:"token keyword"},"var"),a(" hasSecret "),n("span",{class:"token operator"},"="),a(" provider"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"callRemoteApi"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"string"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),a(`

    `),n("span",{class:"token keyword"},"return"),a(" hasSecret "),n("span",{class:"token operator"},"||"),a(" hasOutput"),n("span",{class:"token punctuation"},";"),a(`
`),n("span",{class:"token punctuation"},"}"),a(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),f=n("div",{class:"language-java line-numbers-mode","data-ext":"java"},[n("pre",{class:"language-java"},[n("code",null,[n("span",{class:"token keyword"},"public"),a(),n("span",{class:"token keyword"},"boolean"),a(" shouldSkip "),n("span",{class:"token punctuation"},"{"),a(`
    `),n("span",{class:"token keyword"},"var"),a(" hasOutput "),n("span",{class:"token operator"},"="),a(),n("span",{class:"token class-name"},"CollectionUtils"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"isNotEmpty"),n("span",{class:"token punctuation"},"("),a("response"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"getSpec"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"getOutputs"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),a(`
    `),n("span",{class:"token keyword"},"return"),a(" hasOutput "),n("span",{class:"token operator"},"||"),a(),n("span",{class:"token function"},"hasSecret"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"string"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),a(`
`),n("span",{class:"token punctuation"},"}"),a(`

`),n("span",{class:"token keyword"},"private"),a(),n("span",{class:"token keyword"},"boolean"),a(),n("span",{class:"token function"},"hasSecret"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"String"),a(" string"),n("span",{class:"token punctuation"},")"),a(),n("span",{class:"token punctuation"},"{"),a(`
    `),n("span",{class:"token keyword"},"return"),a(" provider"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"callRemoteApi"),n("span",{class:"token punctuation"},"("),a("string"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),a(`
`),n("span",{class:"token punctuation"},"}"),a(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),y=o(`<p>总的原则就是把耗时的表达式滞后，如果表达式比较长的话，可以提取成函数。</p><h3 id="静态方法的调用" tabindex="-1"><a class="header-anchor" href="#静态方法的调用" aria-hidden="true">#</a> 静态方法的调用</h3><p>当通过 Java 中的空引用调用静态方法时，不会引发异常并且代码会运行。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Greeting</span> greeting <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        greeting<span class="token punctuation">.</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Hello</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Greeting</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>静态方法属于类而不是实例，在编译时greeting.hello()变成Greeting.hello()。<mark>调用静态方法时始终使用类名，而不是实例</mark>。</p><h3 id="枚举类的比较" tabindex="-1"><a class="header-anchor" href="#枚举类的比较" aria-hidden="true">#</a> 枚举类的比较</h3><p>对于枚举判断相等，我们可以使用<code>==</code>或者<code>equals</code>方法</p><ul><li>使用<code>==</code></li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">boolean</span> isEnabled <span class="token operator">=</span> accountStatus <span class="token operator">==</span> <span class="token class-name">Status</span><span class="token punctuation">.</span><span class="token constant">ENABLED</span><span class="token punctuation">;</span> <span class="token comment">// true or false</span>
<span class="token keyword">boolean</span> isEnabled <span class="token operator">=</span> <span class="token string">&quot;string&quot;</span> <span class="token operator">==</span> <span class="token class-name">Status</span><span class="token punctuation">.</span><span class="token constant">ENABLED</span><span class="token punctuation">;</span> <span class="token comment">// compiler error</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>如果accountStatus为null，上述可以工作。如果accountStatus不是一个枚举，那编译报错。</p><ul><li>使用<code>equals</code></li></ul><p>将枚举常量放在左边，这样就可以避免空指针异常，但是没有类型的编译时检查。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">boolean</span> isEnabled <span class="token operator">=</span> <span class="token class-name">Status</span><span class="token punctuation">.</span><span class="token constant">ENABLED</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>accountStatus<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true or false</span>
<span class="token keyword">boolean</span> isEnabled <span class="token operator">=</span> <span class="token class-name">Status</span><span class="token punctuation">.</span><span class="token constant">ENABLED</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">&quot;null&quot;</span><span class="token punctuation">)</span> <span class="token comment">// false，正常编译</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">Tips</p><p>对于枚举判断相等，推荐使用<code>==</code>，因为它提供类型的编译时检查并且保证了<code>null</code>安全</p></div><h3 id="map的get方法为null的情况" tabindex="-1"><a class="header-anchor" href="#map的get方法为null的情况" aria-hidden="true">#</a> Map的get方法为null的情况</h3><p>Map的<code>get</code>方法返回结果为<code>null</code>是有两种情况：</p><ul><li>The map does not contain the provided key</li><li>The map does contain the key but its value is null</li></ul><p>所以说如果想要判断key在map中是否存在，建议使用<code>contains(Object key)</code>方法。另外Java 8中提供了getOrDefault(Object key, V defaultValue)，如果相应的key对应的值是null，那么返回defaultValue。</p><h3 id="stream中检查存在性" tabindex="-1"><a class="header-anchor" href="#stream中检查存在性" aria-hidden="true">#</a> Stream中检查存在性</h3><p>Java 8中引入的Stream，方便了我们对Collection的操作。在检查Java流中是否存在时，使用<code>anyMatch()</code>而不是<code>count() &gt; 0</code></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// Stream has 10k objects</span>

<span class="token comment">// 2ms</span>
result <span class="token operator">=</span> employees<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">anyMatch</span><span class="token punctuation">(</span>e <span class="token operator">-&gt;</span> e<span class="token punctuation">.</span><span class="token function">isActive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 20ms</span>
result <span class="token operator">=</span> employees<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fliter</span><span class="token punctuation">(</span>e <span class="token operator">-&gt;</span> e<span class="token punctuation">.</span><span class="token function">isActive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">Tips</p><p>对比于<code>count() &gt; 0</code>，使用<code>anyMatch()</code>更安全，性能也更好。因为<code>anyMatch</code>在检索过程中，如果发现有一个满足条件，就直接返回true了。而<code>count() &gt; 0</code>撘配<code>filter</code>会检索整个Stream。</p></div><h3 id="null的instanceof操作符" tabindex="-1"><a class="header-anchor" href="#null的instanceof操作符" aria-hidden="true">#</a> null的instanceof操作符</h3><p>如果对象为 null，<code>instanceof</code>运算符将返回false。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// before</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>object <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> object <span class="token keyword">instanceof</span>  <span class="token class-name">MyClass</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token comment">// after: better</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>object <span class="token keyword">instanceof</span> <span class="token class-name">MyClass</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="谨慎使用bigdecimal-double-构造" tabindex="-1"><a class="header-anchor" href="#谨慎使用bigdecimal-double-构造" aria-hidden="true">#</a> 谨慎使用BigDecimal(double)构造</h3><p><code>BigDecimal(double)</code>存在精度损失风险，在精确计算或值比较的场景中可能会导致业务逻辑异常。比如下面实际存储的值就是：<mark>0.100000001490116119384765625</mark></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">BigDecimal</span> value <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span> <span class="token punctuation">(</span><span class="token number">0.1f</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>优先推荐<code>BigDecimal(String)</code>的构造方法或使用<code>BigDecimal.valueOf</code>方法，此方法内部其实执行了Double的toString方法，而Double的toString按double的实际能表达的精度对尾数进行了截断。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">BigDecimal</span> recommend1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">&quot;0.1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">BigDecimal</span> recommend2 <span class="token operator">=</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>当涉及到金钱、对精度有要求的计算时，最好是使用<code>BigDecimal</code>，而不是使用<code>Double</code>或者<code>Float</code>。当然对比于运算速度，<code>Bigdecimal</code>是要慢些的。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token number">0.1d</span> <span class="token operator">*</span> <span class="token number">0.2d</span><span class="token punctuation">;</span> <span class="token comment">// 0.020000000000000004</span>
<span class="token class-name">BigDecimal</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token number">0.1d</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">multiply</span><span class="token punctuation">(</span><span class="token class-name">BigDecimal</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token number">0.2d</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0.02</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,32);function j(w,x){const c=i("CodeTabs");return u(),d("div",null,[v,p(c,{id:"22",data:[{id:"yaml"},{id:"java"}],"tab-id":"java"},{title0:s(({value:e,isActive:t})=>[a("yaml")]),title1:s(({value:e,isActive:t})=>[a("java")]),tab0:s(({value:e,isActive:t})=>[m]),tab1:s(({value:e,isActive:t})=>[b]),_:1}),g,p(c,{id:"129",data:[{id:"before"},{id:"after"}],"tab-id":"java"},{title0:s(({value:e,isActive:t})=>[a("before")]),title1:s(({value:e,isActive:t})=>[a("after")]),tab0:s(({value:e,isActive:t})=>[h]),tab1:s(({value:e,isActive:t})=>[f]),_:1}),y])}const S=l(k,[["render",j],["__file","java-tips.html.vue"]]);export{S as default};
