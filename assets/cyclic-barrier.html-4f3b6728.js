const e=JSON.parse('{"key":"v-19d653b4","path":"/java/concurrency/cyclic-barrier.html","title":"循环栅栓CyclicBarrier","lang":"en-US","frontmatter":{"title":"循环栅栓CyclicBarrier","date":"2023-08-13T00:00:00.000Z","category":"java","tag":["Concurrency-Toolkit","Concurrency"]},"headers":[{"level":2,"title":"CyclicBarrier的使用","slug":"cyclicbarrier的使用","link":"#cyclicbarrier的使用","children":[]},{"level":2,"title":"分析","slug":"分析","link":"#分析","children":[]},{"level":2,"title":"FAQ","slug":"faq","link":"#faq","children":[{"level":3,"title":"Guava里面的RateLimiter?","slug":"guava里面的ratelimiter","link":"#guava里面的ratelimiter","children":[]}]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]},{"level":2,"title":"参考","slug":"参考","link":"#参考","children":[]}],"git":{"createdTime":1694501966000,"updatedTime":1694501966000},"readingTime":{"minutes":3.19,"words":957},"filePathRelative":"java/concurrency/cyclic-barrier.md","localizedDate":"August 13, 2023","excerpt":"<p><code>CyclicBarrier</code>是另外一种多线程并发控制实用工具。和<code>CountDownLatch</code>非常类似，它也可以实现线程间的计数等待，但它的功能比<code>CountDownLatch</code>更加复杂且强大。</p>\\n<h2> CyclicBarrier的使用</h2>\\n<p><code>CyclicBarrier</code>适用于这样的情况：你希望创建一组任务，它们并行地执行工作，然后在进行下一个步骤之前等待，直至所有任务都完成。类似于电商中的拼团、拼购，先准备购买的人必须等待，直到要购买的人数达到一定值时才开团。</p>\\n<figure><figcaption>cyclic barrier</figcaption></figure>","copyright":{"author":"huhx","license":"MIT"}}');export{e as data};
