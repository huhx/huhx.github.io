const e=JSON.parse('{"key":"v-ea20d680","path":"/java/base/annotation.html","title":"注解Annotation","lang":"en-US","frontmatter":{"title":"注解Annotation","date":"2023-08-21T00:00:00.000Z","category":"java","tag":["Java"]},"headers":[{"level":2,"title":"注解","slug":"注解","link":"#注解","children":[]},{"level":2,"title":"FAQ","slug":"faq","link":"#faq","children":[]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]},{"level":2,"title":"参考","slug":"参考","link":"#参考","children":[]}],"git":{"createdTime":1694501966000,"updatedTime":1694501966000},"readingTime":{"minutes":1.07,"words":320},"filePathRelative":"java/base/annotation.md","localizedDate":"August 21, 2023","excerpt":"<p>注解是众多引入到Java SE5中的重要的语言变化之一。它为我们在代码中添加信息提供了一种形式化的方法，使我们可以在稍后某个时刻非常方便的使用这些数据。今天我们就开始学习一下java中注解的知识。</p>\\n<h2> 注解</h2>\\n<p>java内置了三种标准注解，以及四种元注解。元注解专职负责注解其他的注解。</p>\\n<p>标准注解：@Override、@Deprecated、@Suppresswarnings</p>\\n<ul>\\n<li><code>@Override</code>：表示当前的方法定义将覆盖超类中的方法。如果你不小心拼写错误，或者方法签名对不上被覆盖的方法，编译器就会发出错误提示。</li>\\n<li><code>@Deprecated</code>：如果程序使用了注解为它的元素，那么编译器会发出警告信息。</li>\\n<li><code>@Suppresswarnings</code>：关闭不当的编译器警告信息。</li>\\n</ul>","copyright":{"author":"huhx","license":"MIT"}}');export{e as data};
