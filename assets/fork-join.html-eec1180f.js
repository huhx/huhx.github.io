import{_ as e,o as a,c as r,d as i}from"./app-57542e83.js";const o={},d=i('<p>在多核处理器时代，</p><h2 id="使用" tabindex="-1"><a class="header-anchor" href="#使用" aria-hidden="true">#</a> 使用</h2><h2 id="分析" tabindex="-1"><a class="header-anchor" href="#分析" aria-hidden="true">#</a> 分析</h2><h2 id="faq" tabindex="-1"><a class="header-anchor" href="#faq" aria-hidden="true">#</a> FAQ</h2><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><ul><li>Fork/Join是一种基于分治的算法：通过分解任务，并行执行，最后合并结果得到最终结果</li><li><code>ForkJoinPool</code>线程池可以把一个大任务分拆成小任务并行执行，任务类必须继承自<code>RecursiveTask</code>或<code>RecursiveAction</code></li><li>使用Fork/Join模式可以进行并行计算以提高效率</li></ul><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考" aria-hidden="true">#</a> 参考</h2>',7),c=[d];function h(n,t){return a(),r("div",null,c)}const l=e(o,[["render",h],["__file","fork-join.html.vue"]]);export{l as default};
