import{_ as e,r as p,o as i,c,a as s,b as a,e as l,d as n}from"./app-57542e83.js";const o="/assets/202308062019154672593-37f78ef2.svg",m="/assets/20230806201938627400-aa938569.svg",r="/assets/202308060901113109979-794c1abc.svg",u="/assets/202308060905536922095-8ec3e698.svg",h={},d=s("p",null,"数乃万物之理，了解数字，就是掌握真理。都知道数字在计算机中是二进制存储的，但是具体到存储细节可能让很多程序员犯难了。这里我们就深耕细节，展开介绍下整数及浮点数在java虚拟机的表示。",-1),g=s("h2",{id:"概念介绍",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#概念介绍","aria-hidden":"true"},"#"),a(" 概念介绍")],-1),k=s("p",null,"计算机的信息都是以二进制形式表示的，数值也不例外。数有正负之分，那就把最高位存放符号位呗(0为正，1为负)，这诞生了原码。",-1),v=s("h3",{id:"什么是原码",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#什么是原码","aria-hidden":"true"},"#"),a(" 什么是原码")],-1),x=s("p",null,[a("所谓原码，就是符号位加上数字的二进制表示，其中符号位1表示负数，0表示正数。比如说该整数类型的位数是8，那么原码能够表示该整数类型数值的范围就是：(-"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("msup",null,[s("mn",null,"2"),s("mn",null,"7")]),s("mo",null,"+"),s("mn",null,"1")]),s("annotation",{encoding:"application/x-tex"},"2^7 + 1")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.8974em","vertical-align":"-0.0833em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},"2"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8141em"}},[s("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},"7")])])])])])])]),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"+"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"1")])])]),a(") ~ ("),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("msup",null,[s("mn",null,"2"),s("mn",null,"7")]),s("mo",null,"−"),s("mn",null,"1")]),s("annotation",{encoding:"application/x-tex"},"2^7 - 1")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.8974em","vertical-align":"-0.0833em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},"2"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8141em"}},[s("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},"7")])])])])])])]),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"−"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"1")])])]),a(") => (-127 ~ 127)")],-1),b=n(`<p>好了，数值有了在计算机中的表示方法，那么就可以对数值进行算术运算了。但是很快就发现原码进行乘除运算时还好，在加减运算的时候就出现了幺蛾子。</p><p>假定一个数是8位，我们来看看1 - 1的计算过程：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token number">1</span> <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token function">00000001</span><span class="token punctuation">(</span>原码<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">10000001</span><span class="token punctuation">(</span>原码<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">10000010</span><span class="token punctuation">(</span>原码<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这就尴尬了，计算机连最简单的1 - 1都能算错🙄。那让它算下 1 + 1？</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token function">00000001</span><span class="token punctuation">(</span>原码<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">00000001</span><span class="token punctuation">(</span>原码<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">00000010</span><span class="token punctuation">(</span>原码<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token number">2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>好吧，没问题。事实上对于正数的加法运算中原码是完全ok的，问题就出现在带符号位的负数身上。于是，人们为了解决这个问题，就发明了....</p><h3 id="什么是反码" tabindex="-1"><a class="header-anchor" href="#什么是反码" aria-hidden="true">#</a> 什么是反码</h3><p>对，没错，就是反码。反码对于正数就是原码本身，对于负数则在原码的基础上，符号位不变，其余位取反。好的，那来验证下上面的两个运算：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 1 - 1</span>
<span class="token number">1</span> <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token function">00000001</span><span class="token punctuation">(</span>反码<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">11111110</span><span class="token punctuation">(</span>反码<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">11111111</span><span class="token punctuation">(</span>反码<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">10000000</span><span class="token punctuation">(</span>原码<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">0</span>  <span class="token comment">// 有些小问题</span>

<span class="token comment">// 1 + 1</span>
<span class="token function">00000001</span><span class="token punctuation">(</span>反码<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">00000001</span><span class="token punctuation">(</span>反码<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">00000010</span><span class="token punctuation">(</span>反码<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">00000010</span><span class="token punctuation">(</span>原码<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">2</span>  <span class="token comment">// ok</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这一次加减法是没啥子问题，但是有瑕疵，那就是出现在<code>0</code>这个特殊数值上。<code>+0</code>和<code>-0</code>虽说数值是一样的，但是给0带上符号是没意义的。而且0的编码表示还存在两种: <code>10000000</code>(-0)和<code>00000000</code>(+0)。好了，人们还是接受不了0的这个问题，于是补码粉墨登场😎</p><h3 id="什么是补码" tabindex="-1"><a class="header-anchor" href="#什么是补码" aria-hidden="true">#</a> 什么是补码</h3><p>什么是补码？简单来说：负数的补码就是反码加1，整数的补码就是原码本身。那使用补码再来看看上面的1 - 1的计算</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 1 - 1</span>
<span class="token number">1</span> <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token function">00000001</span><span class="token punctuation">(</span>补码<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">11111111</span><span class="token punctuation">(</span>补码<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">00000000</span><span class="token punctuation">(</span>补码<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">00000000</span><span class="token punctuation">(</span>原码<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>那关于0的补码表示呢？</p><ul><li>如果0是正数，补码为原码本身：00000000</li><li>如果0是负数，原码是10000000，反码为11111111，补码为反码加上则是00000000</li></ul><p>这样补码中0的表示就只有一种: <code>00000000</code>，之前说的-0则不存在了，而且补码中的10000000还可以表示最低数-128，这样8位的数值范围就是：(-128 ~ 127)</p><p>数值的表示总算尘埃落定，<mark>补码不负众望，成为了计算机中的数值表示</mark>。</p><div class="hint-container info"><p class="hint-container-title">Info</p><ol><li>原码是最符合人直观的数值二进制表示，但是存在减法运算的问题</li><li>反码在原码基础之上，解决了减法运算的问题，但是又存在0有两个编码的问题</li><li>补码在反码基础之上，解决了0有两个编码的问题，也多出了一个编码表示最低数。同时也简化整数的加减法计算，将减法视为加法，实现加减法的统一</li></ol></div><p>好了，我们讲了数值二进制的几种编码，<code>原码</code>、<code>反码</code>和<code>补码</code>。那具体到java中，又是有哪些的不同呢？</p><h3 id="整数的表示" tabindex="-1"><a class="header-anchor" href="#整数的表示" aria-hidden="true">#</a> 整数的表示</h3><p>数值有大小之分，为了方便存储与计算效率，在java虚拟机中，整数分为<code>byte</code>,<code>short</code>,<code>int</code>和<code>long</code>四种，分别表示8位、16位、32位、64位有符号整数。java中是不存在无符号整数的，C语言是有的。具体如下：</p>`,21),y=s("table",null,[s("thead",null,[s("tr",null,[s("th",null,"基本类型"),s("th",null,"大小(bit)"),s("th",null,"最小值"),s("th",null,"最大值")])]),s("tbody",null,[s("tr",null,[s("td",null,"byte"),s("td",null,"8"),s("td",null,"-128"),s("td",null,"127")]),s("tr",null,[s("td",null,"short"),s("td",null,"16"),s("td",null,[a("-"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("msup",null,[s("mn",null,"2"),s("mn",null,"15")])]),s("annotation",{encoding:"application/x-tex"},"2^{15}")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.8141em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},"2"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8141em"}},[s("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mtight"},"15")])])])])])])])])])])])]),s("td",null,[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("msup",null,[s("mn",null,"2"),s("mn",null,"15")])]),s("annotation",{encoding:"application/x-tex"},"2^{15}")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.8141em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},"2"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8141em"}},[s("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mtight"},"15")])])])])])])])])])])]),a(" -1")])]),s("tr",null,[s("td",null,"int"),s("td",null,"32"),s("td",null,[a("-"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("msup",null,[s("mn",null,"2"),s("mn",null,"31")])]),s("annotation",{encoding:"application/x-tex"},"2^{31}")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.8141em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},"2"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8141em"}},[s("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mtight"},"31")])])])])])])])])])])])]),s("td",null,[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("msup",null,[s("mn",null,"2"),s("mn",null,"31")])]),s("annotation",{encoding:"application/x-tex"},"2^{31}")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.8141em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},"2"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8141em"}},[s("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mtight"},"31")])])])])])])])])])])]),a(" -1")])]),s("tr",null,[s("td",null,"long"),s("td",null,"64"),s("td",null,[a("-"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("msup",null,[s("mn",null,"2"),s("mn",null,"63")])]),s("annotation",{encoding:"application/x-tex"},"2^{63}")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.8141em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},"2"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8141em"}},[s("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mtight"},"63")])])])])])])])])])])])]),s("td",null,[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("msup",null,[s("mn",null,"2"),s("mn",null,"63")])]),s("annotation",{encoding:"application/x-tex"},"2^{63}")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.8141em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},"2"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8141em"}},[s("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mtight"},"63")])])])])])])])])])])]),a(" -1")])])])],-1),w=n(`<p>java中Integer和Long类型也提供了输出二进制补码的支持，拿Integer来说：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">toBinaryString</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1010</span>
<span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">toBinaryString</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 11111111111111111111111111110110</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="浮点数的表示" tabindex="-1"><a class="header-anchor" href="#浮点数的表示" aria-hidden="true">#</a> 浮点数的表示</h3><p>在编程中，浮点类型数据主要用于表示小数的。对比于整数的表示，计算机表现小数的难点就在于小数点后面的数字了。<mark>浮点数在计算机中的表示是基于科学计数法的</mark>，只不过是二进制的而已。</p>`,4),f=s("p",null,[a("我们知道二进制表示整数的时候，最低位表示"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("msup",null,[s("mn",null,"2"),s("mn",null,"0")])]),s("annotation",{encoding:"application/x-tex"},"2^0")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.8141em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},"2"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8141em"}},[s("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},"0")])])])])])])])])])]),a("，往高位依次是"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("msup",null,[s("mn",null,"2"),s("mn",null,"1")])]),s("annotation",{encoding:"application/x-tex"},"2^1")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.8141em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},"2"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8141em"}},[s("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},"1")])])])])])])])])])]),a(","),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("msup",null,[s("mn",null,"2"),s("mn",null,"2")])]),s("annotation",{encoding:"application/x-tex"},"2^2")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.8141em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},"2"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8141em"}},[s("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},"2")])])])])])])])])])]),a(","),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("msup",null,[s("mn",null,"2"),s("mn",null,"3")])]),s("annotation",{encoding:"application/x-tex"},"2^3")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.8141em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},"2"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8141em"}},[s("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},"3")])])])])])])])])])]),a(",...,"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("msup",null,[s("mn",null,"2"),s("mi",null,"n")])]),s("annotation",{encoding:"application/x-tex"},"2^n")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6644em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},"2"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.6644em"}},[s("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mathnormal mtight"},"n")])])])])])])])])])]),a("。那么对应的，对于二进制小数点的部分，最高位则是"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("msup",null,[s("mn",null,"2"),s("mrow",null,[s("mo",null,"−"),s("mn",null,"1")])])]),s("annotation",{encoding:"application/x-tex"},"2^{-1}")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.8141em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},"2"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8141em"}},[s("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mtight"},"−"),s("span",{class:"mord mtight"},"1")])])])])])])])])])])]),a(","),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("msup",null,[s("mn",null,"2"),s("mrow",null,[s("mo",null,"−"),s("mn",null,"2")])])]),s("annotation",{encoding:"application/x-tex"},"2^{-2}")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.8141em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},"2"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8141em"}},[s("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mtight"},"−"),s("span",{class:"mord mtight"},"2")])])])])])])])])])])]),a(","),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("msup",null,[s("mn",null,"2"),s("mrow",null,[s("mo",null,"−"),s("mn",null,"3")])])]),s("annotation",{encoding:"application/x-tex"},"2^{-3}")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.8141em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},"2"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8141em"}},[s("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mtight"},"−"),s("span",{class:"mord mtight"},"3")])])])])])])])])])])]),a(","),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("msup",null,[s("mn",null,"2"),s("mrow",null,[s("mo",null,"−"),s("mn",null,"4")])])]),s("annotation",{encoding:"application/x-tex"},"2^{-4}")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.8141em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},"2"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8141em"}},[s("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mtight"},"−"),s("span",{class:"mord mtight"},"4")])])])])])])])])])])]),a(",...,"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("msup",null,[s("mn",null,"2"),s("mrow",null,[s("mo",null,"−"),s("mi",null,"m")])])]),s("annotation",{encoding:"application/x-tex"},"2^{-m}")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.7713em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},"2"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.7713em"}},[s("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mtight"},"−"),s("span",{class:"mord mathnormal mtight"},"m")])])])])])])])])])])]),a("。")],-1),z=n('<p>下面举几个例子：</p><figure><img src="'+o+`" alt="calculate" tabindex="0" loading="lazy"><figcaption>calculate</figcaption></figure><p>十进制的7.125，用二进制表示是111.001。其实这种转换是存在些问题的，十进制不是无限循环小数的，转换成二进制就变成了无限循环小数。像上述例子中的0.6，表示成二进制之后成了循环体为1001的无限循环小数。而计算机底层无法精确存储那个无限循环二进制数的，只能存一个四舍五入的数值了，这就导致了<code>浮点数精度不准确</code>的问题。这种机制也直接说明了：对于金额这种对精度有要求的计算，可别用浮点数了。</p><p>下面是java中的具体例子, float数值的比较和运算都有可能会出现问题：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token number">0.60000003f</span> <span class="token operator">==</span> <span class="token number">0.60000001f</span> <span class="token comment">// true</span>
<span class="token number">0.1f</span> <span class="token operator">+</span> <span class="token number">0.11f</span> <span class="token comment">// 0.21000001</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>下一步，将二进制表示为以2为底的科学计数法，如图：</p><figure><img src="`+m+'" alt="transform" tabindex="0" loading="lazy"><figcaption>transform</figcaption></figure><p>所以要存浮点数数，需要存储三个部分：正负号，尾数，指数。二进制的科学记数法表现形式如下</p>',8),M=s("p",{class:"katex-block"},[s("span",{class:"katex-display"},[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},[s("semantics",null,[s("mrow",null,[s("mi",null,"v"),s("mi",null,"a"),s("mi",null,"l"),s("mi",null,"u"),s("mi",null,"e"),s("mo",null,"="),s("mi",null,"f"),s("mi",null,"l"),s("mi",null,"a"),s("mi",null,"g"),s("mo",null,"∗"),s("mi",null,"m"),s("mo",null,"∗"),s("msup",null,[s("mn",null,"2"),s("mi",null,"n")])]),s("annotation",{encoding:"application/x-tex"}," value = flag * m * 2^{n} ")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6944em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"v"),s("span",{class:"mord mathnormal"},"a"),s("span",{class:"mord mathnormal",style:{"margin-right":"0.01968em"}},"l"),s("span",{class:"mord mathnormal"},"u"),s("span",{class:"mord mathnormal"},"e"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.8889em","vertical-align":"-0.1944em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.10764em"}},"f"),s("span",{class:"mord mathnormal",style:{"margin-right":"0.01968em"}},"l"),s("span",{class:"mord mathnormal"},"a"),s("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"g"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"∗"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.4653em"}}),s("span",{class:"mord mathnormal"},"m"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"∗"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.7144em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},"2"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.7144em"}},[s("span",{style:{top:"-3.113em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mathnormal mtight"},"n")])])])])])])])])])])])])],-1),_=s("div",{class:"hint-container info"},[s("p",{class:"hint-container-title"},"Info"),s("p",null,[a("我们知道-32767这个数用科学计数法可以写成-3.2767×"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mn",null,"1"),s("msup",null,[s("mn",null,"0"),s("mn",null,"4")])]),s("annotation",{encoding:"application/x-tex"},"10^{4}")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.8141em"}}),s("span",{class:"mord"},"1"),s("span",{class:"mord"},[s("span",{class:"mord"},"0"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8141em"}},[s("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mtight"},"4")])])])])])])])])])])]),a("，其中-表示"),s("code",null,"符号"),a("，3.2767称为"),s("code",null,"尾数"),a("，4称为"),s("code",null,"指数"),a("。浮点数在计算机中的表示与此类似，只是它的基数是2而不是10。")]),s("p",null,[a("所以再看上面的公式：flag * m * "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("msup",null,[s("mn",null,"2"),s("mi",null,"n")])]),s("annotation",{encoding:"application/x-tex"},"2^{n}")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6644em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},"2"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.6644em"}},[s("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mathnormal mtight"},"n")])])])])])])])])])])]),a("就容易得知，"),s("code",null,"flag"),a("就是符号位，"),s("code",null,"m"),a("就是尾数，"),s("code",null,"n"),a("就是指数了，由于是二进制的科学计数法，此处的m的范围：1.0 <= m < 2.0,数值都是1点几了，1可以不存，只存小数点后面的数字了。")])],-1),L={href:"https://www.geeksforgeeks.org/ieee-standard-754-floating-point-numbers/",target:"_blank",rel:"noopener noreferrer"},j=n("<p>在IEEE 754的定义中，一个浮点数由3部分组成，分别是符号位、指数位和尾数位。Java中<code>float</code>和<code>double</code>两种类型的表示如下:</p><table><thead><tr><th>类型</th><th>符号位</th><th>指数位</th><th>尾数位</th><th>总共</th></tr></thead><tbody><tr><td>float</td><td>1</td><td>8</td><td>23</td><td>32</td></tr><tr><td>double</td><td>1</td><td>11</td><td>52</td><td>64</td></tr></tbody></table>",2),I=s("blockquote",null,[s("p",null,[a("对于指数部分，加上了编译量"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("msup",null,[s("mn",null,"2"),s("mi",null,"n")]),s("mo",null,"−"),s("mn",null,"1")]),s("annotation",{encoding:"application/x-tex"},"2^{n} - 1")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.7477em","vertical-align":"-0.0833em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},"2"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.6644em"}},[s("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mathnormal mtight"},"n")])])])])])])])]),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"−"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"1")])])]),a("，所以对于8位的float类型，编译量就是127，相应的double类型就是1023。")])],-1),E=n('<p>所以对于float类型的-7.5，我们来看看它的二进制存储是什么样的</p><figure><img src="'+r+'" alt="浮点数：-7.5f" tabindex="0" loading="lazy"><figcaption>浮点数：-7.5f</figcaption></figure><p>我们快速算下0.6的数值：</p><figure><img src="'+u+'" alt="浮点数：0.6f" tabindex="0" loading="lazy"><figcaption>浮点数：0.6f</figcaption></figure><p>Java本身是平台无关的，它提供了统一的字节序视图，不受底层硬件的影响。Java虚拟机规定了所有数值类型的<code>大端字节序</code>。</p><p>float浮点数还可以表示一些特殊的数字，如下：</p><table><thead><tr><th>数值</th><th>二进制表示</th></tr></thead><tbody><tr><td>正无穷</td><td><code>0 11111111 00000000000000000000000</code></td></tr><tr><td>负无穷</td><td><code>1 11111111 00000000000000000000000</code></td></tr><tr><td>NaN</td><td><code>0 11111111 10000000000000000000000</code></td></tr><tr><td>0</td><td><code>0 00000000 00000000000000000000000</code></td></tr><tr><td>最大正浮点数</td><td><code>0 11111110 11111111111111111111111</code></td></tr><tr><td>最小正浮点数</td><td><code>0 00000000 00000000000000000000001</code></td></tr></tbody></table><h2 id="faq" tabindex="-1"><a class="header-anchor" href="#faq" aria-hidden="true">#</a> FAQ</h2><h3 id="使用补码-怎么乘除法" tabindex="-1"><a class="header-anchor" href="#使用补码-怎么乘除法" aria-hidden="true">#</a> 使用补码，怎么乘除法？</h3><h3 id="字节序的大端模式与小端模式" tabindex="-1"><a class="header-anchor" href="#字节序的大端模式与小端模式" aria-hidden="true">#</a> 字节序的大端模式与小端模式？</h3><h3 id="浮点数正无穷与负无穷" tabindex="-1"><a class="header-anchor" href="#浮点数正无穷与负无穷" aria-hidden="true">#</a> 浮点数正无穷与负无穷？</h3><h3 id="浮点数为什么要加偏移量" tabindex="-1"><a class="header-anchor" href="#浮点数为什么要加偏移量" aria-hidden="true">#</a> 浮点数为什么要加偏移量？</h3><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料" aria-hidden="true">#</a> 参考资料</h2>',14),N={href:"https://www.geeksforgeeks.org/ieee-standard-754-floating-point-numbers/",target:"_blank",rel:"noopener noreferrer"};function B(S,V){const t=p("ExternalLinkIcon");return i(),c("div",null,[d,g,k,v,x,b,y,w,f,z,M,_,s("p",null,[a("知道了这三个是浮点数表示的重要组成部分，我们再来看下"),s("a",L,[a("IEEE 754"),l(t)]),a("标准了，它是浮点数的主要存储方案。这一标准最早在1985年提出，基本上已经被用于所有计算机中。先后经历了几次更新，但浮点数的表示规则却从来没有变过。")]),j,I,E,s("ul",null,[s("li",null,[s("a",N,[a("ieee-standard-754-floating-point-numbers"),l(t)])])])])}const J=e(h,[["render",B],["__file","how-number-stored.html.vue"]]);export{J as default};
