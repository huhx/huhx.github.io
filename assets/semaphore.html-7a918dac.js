const n=JSON.parse('{"key":"v-3d5cb905","path":"/java/concurrency/semaphore.html","title":"信号量Semaphore","lang":"en-US","frontmatter":{"title":"信号量Semaphore","date":"2023-08-13T00:00:00.000Z","category":"java","tag":["Concurrency-Toolkit","Concurrency"]},"headers":[{"level":2,"title":"Semaphore使用","slug":"semaphore使用","link":"#semaphore使用","children":[]},{"level":2,"title":"Semaphore分析","slug":"semaphore分析","link":"#semaphore分析","children":[]},{"level":2,"title":"FAQ","slug":"faq","link":"#faq","children":[]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]},{"level":2,"title":"参考","slug":"参考","link":"#参考","children":[]}],"git":{"createdTime":1694501966000,"updatedTime":1694501966000},"readingTime":{"minutes":3.32,"words":996},"filePathRelative":"java/concurrency/semaphore.md","localizedDate":"August 13, 2023","excerpt":"<p>正常的锁不管是内部锁<code>synchronized</code>还是重入锁<code>ReentrantLock</code>在任意时刻只允许一个线程访问临界资源，Java中有没有可以让多个任务同时这个临界资源呢？接下来就让我们来看下线程同步的辅助类<code>Semaphore</code>。</p>\\n<h2> Semaphore使用</h2>\\n<p>信号量<code>Semaphore</code>为多线程协作提供了更为强大的控制方法，它可以指定多个线程同时访问某个资源。<code>Semaphore</code>有以下两个构造函数：</p>\\n<div class=\\"language-java line-numbers-mode\\" data-ext=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token keyword\\">public</span> <span class=\\"token class-name\\">Semaphore</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> <span class=\\"token keyword\\">permits</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    sync <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">NonfairSync</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">permits</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token keyword\\">public</span> <span class=\\"token class-name\\">Semaphore</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> <span class=\\"token keyword\\">permits</span><span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">boolean</span> fair<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    sync <span class=\\"token operator\\">=</span> fair <span class=\\"token operator\\">?</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">FairSync</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">permits</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">:</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">NonfairSync</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">permits</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","copyright":{"author":"huhx","license":"MIT"}}');export{n as data};
