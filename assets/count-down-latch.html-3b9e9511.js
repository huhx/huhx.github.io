import{_ as p,r as e,o,c,a as s,b as n,e as l,w as i,d as a}from"./app-57542e83.js";const u="/assets/202308162025258158056-3b31e186.svg",r={},k=a('<p><code>CountDownLatch</code>是JDK 5+里面闭锁的一个实现，允许一个或者多个线程等待某个事件的发生。今天我们通过一些实例来学习一下它的用法。</p><h2 id="countdownlatch的使用" tabindex="-1"><a class="header-anchor" href="#countdownlatch的使用" aria-hidden="true">#</a> CountDownLatch的使用</h2><p><code>CountDownLatch</code>被用来同步一个或多个线程，强制它们等待由其他线程执行的一组操作完成。你可以向<code>CountDownLatch</code>对象设置一个初始计数值，任何在这个对象上调用<code>await()</code>方法都将阻塞，直至这个计数值达到<code>0</code>。其他线程在结束工作时，可以在该对象上调用<code>countDown()</code>方法来减小这个计数值。</p>',3),d=s("code",null,"CountDownLatch",-1),m=a('<figure><img src="'+u+`" alt="count-down-latch" tabindex="0" loading="lazy"><figcaption>count-down-latch</figcaption></figure><p>只有等线程1、线程2和线程3中都运行结束后，才可以运行线程4。即一定数量的线程都完成工作后，才可以共同触发后续的一个或多个线程的开始工作。</p><p><code>CountDownLatch</code>的构建函数接收一个整数为参数，即当前这个计数器的计数个数。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">CountDownLatch</span><span class="token punctuation">(</span><span class="token keyword">int</span> count<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">&quot;count &lt; 0&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>sync <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sync</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中的<code>count</code>其实就是: 线程可以通过等待之前必须调用<code>countDown</code>的次数。</p><p><code>CountDownLatch</code>中的方法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span>
<span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">await</span><span class="token punctuation">(</span><span class="token keyword">long</span> timeout<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span> unit<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">countDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">getCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>await</code>: 导致当前线程等待，直到锁存器倒数为零或者线程被中断。带有参数的<code>await</code>方法多一种方式结束等待：指定的等待时间已过</li><li><code>countDown</code>: 递减锁存器的计数，如果计数达到零，则释放所有等待线程</li><li><code>getCount</code>: 返回当前计数，一般用于调度或者测试</li></ul><p>下面我们给出一个例子：阻止任何工人开始工作，直到司机准备好</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CountDownLatchTest</span> <span class="token punctuation">{</span>
    <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token class-name">CountDownLatch</span> startSignal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CountDownLatch</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token class-name">CountDownLatch</span> doneSignal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CountDownLatch</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>
            <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TaskWorker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        startSignal<span class="token punctuation">.</span><span class="token function">countDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Diver is ready, workers can start to work: &quot;</span> <span class="token operator">+</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Diver is waiting for the workers done their works &quot;</span> <span class="token operator">+</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        doneSignal<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Workers has done their works, Diver start the car. &quot;</span> <span class="token operator">+</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">TaskWorker</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>
        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                startSignal<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Worker: &quot;</span> <span class="token operator">+</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot; done the work, time: &quot;</span> <span class="token operator">+</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                doneSignal<span class="token punctuation">.</span><span class="token function">countDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="highlight-lines"><br><br><br><br><br><br><br><br><div class="highlight-line"> </div><br><br><br><br><br><div class="highlight-line"> </div><br><br><br><br><br><br><br><div class="highlight-line"> </div><br><div class="highlight-line"> </div><br><br><br><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果为：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Diver</span> is ready<span class="token punctuation">,</span> workers can start <span class="token keyword">to</span> <span class="token namespace">work</span><span class="token operator">:</span> <span class="token number">2023</span><span class="token operator">-</span><span class="token number">08</span><span class="token operator">-</span><span class="token number">15</span><span class="token constant">T20</span><span class="token operator">:</span><span class="token number">40</span><span class="token operator">:</span><span class="token number">59.137129</span>
<span class="token class-name">Worker</span><span class="token operator">:</span> <span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">0</span> done the work<span class="token punctuation">,</span> time<span class="token operator">:</span> <span class="token number">2023</span><span class="token operator">-</span><span class="token number">08</span><span class="token operator">-</span><span class="token number">15</span><span class="token constant">T20</span><span class="token operator">:</span><span class="token number">40</span><span class="token operator">:</span><span class="token number">59.137085</span>
<span class="token class-name">Worker</span><span class="token operator">:</span> <span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">1</span> done the work<span class="token punctuation">,</span> time<span class="token operator">:</span> <span class="token number">2023</span><span class="token operator">-</span><span class="token number">08</span><span class="token operator">-</span><span class="token number">15</span><span class="token constant">T20</span><span class="token operator">:</span><span class="token number">40</span><span class="token operator">:</span><span class="token number">59.137092</span>
<span class="token class-name">Worker</span><span class="token operator">:</span> <span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">3</span> done the work<span class="token punctuation">,</span> time<span class="token operator">:</span> <span class="token number">2023</span><span class="token operator">-</span><span class="token number">08</span><span class="token operator">-</span><span class="token number">15</span><span class="token constant">T20</span><span class="token operator">:</span><span class="token number">40</span><span class="token operator">:</span><span class="token number">59.137106</span>
<span class="token class-name">Worker</span><span class="token operator">:</span> <span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">2</span> done the work<span class="token punctuation">,</span> time<span class="token operator">:</span> <span class="token number">2023</span><span class="token operator">-</span><span class="token number">08</span><span class="token operator">-</span><span class="token number">15</span><span class="token constant">T20</span><span class="token operator">:</span><span class="token number">40</span><span class="token operator">:</span><span class="token number">59.137088</span>
<span class="token class-name">Worker</span><span class="token operator">:</span> <span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">4</span> done the work<span class="token punctuation">,</span> time<span class="token operator">:</span> <span class="token number">2023</span><span class="token operator">-</span><span class="token number">08</span><span class="token operator">-</span><span class="token number">15</span><span class="token constant">T20</span><span class="token operator">:</span><span class="token number">40</span><span class="token operator">:</span><span class="token number">59.137113</span>
<span class="token class-name">Diver</span> is waiting <span class="token keyword">for</span> the workers done their works <span class="token number">2023</span><span class="token operator">-</span><span class="token number">08</span><span class="token operator">-</span><span class="token number">15</span><span class="token constant">T20</span><span class="token operator">:</span><span class="token number">41</span><span class="token operator">:</span><span class="token number">00.144588</span>
<span class="token class-name">Workers</span> has done their works<span class="token punctuation">,</span> <span class="token class-name">Diver</span> starts the car<span class="token punctuation">.</span> <span class="token number">2023</span><span class="token operator">-</span><span class="token number">08</span><span class="token operator">-</span><span class="token number">15</span><span class="token constant">T20</span><span class="token operator">:</span><span class="token number">41</span><span class="token operator">:</span><span class="token number">00.145089</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里我们创建两个<code>CountDownLatch</code>：</p><ul><li><code>startSignal</code>的计数量为1，可以当成是启动信号，阻止任何工人开始工作，直到驾驶员准备好让他们继续操作</li><li><code>doneSignal</code>的计数量为5，可以当成是完成信号，让驾驶员等待直到所有工作人员完成任务</li></ul><p>代码里面我们创建五个线程<code>TaskWorker</code>模拟五个工人，他们需要一直等待<code>startSignal.await()</code>直到驾驶员发送开始的信号。在<code>main</code>线程中<code>startSignal.countDown()</code>表示驾驶员发送了开始的信号。于是五个工人开始了工作(<code>done the work...</code>)，于此同时驾驶员在等待所有工人完成工作<code>doneSignal.await()</code>。</p><p>工人完成自己的工作时，会告知驾驶员自己工作已完成的信号<code>doneSignal.countDown()</code>。当驾驶员收到所有工人完成工作的信号后，便开始启动了车辆扬长而去(<code>Diver start the car</code>)....</p><h2 id="countdownlatch的分析" tabindex="-1"><a class="header-anchor" href="#countdownlatch的分析" aria-hidden="true">#</a> CountDownLatch的分析</h2><h2 id="faq" tabindex="-1"><a class="header-anchor" href="#faq" aria-hidden="true">#</a> FAQ</h2><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考" aria-hidden="true">#</a> 参考</h2>`,20);function b(v,w){const t=e("RouterLink");return o(),c("div",null,[k,s("p",null,[d,n("被设计为只触发一次，计数值不能被重置。如果你需要能够重置计数值的版本，则可以使用"),l(t,{to:"/java/concurrency/cyclic-barrier.html"},{default:i(()=>[n("CyclicBarrier")]),_:1}),n("。")]),m])}const g=p(r,[["render",b],["__file","count-down-latch.html.vue"]]);export{g as default};
