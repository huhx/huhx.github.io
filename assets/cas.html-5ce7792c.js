const e=JSON.parse('{"key":"v-838143d8","path":"/java/concurrency/cas.html","title":"无锁宗师CAS","lang":"en-US","frontmatter":{"title":"无锁宗师CAS","date":"2023-08-11T00:00:00.000Z","category":"java","tag":["Concurrency-Toolkit","Concurrency"]},"headers":[{"level":2,"title":"CAS","slug":"cas","link":"#cas","children":[]},{"level":2,"title":"原子操作","slug":"原子操作","link":"#原子操作","children":[]},{"level":2,"title":"工作原理","slug":"工作原理","link":"#工作原理","children":[]},{"level":2,"title":"优缺点","slug":"优缺点","link":"#优缺点","children":[{"level":3,"title":"ABA问题","slug":"aba问题","link":"#aba问题","children":[]},{"level":3,"title":"循环长开销大","slug":"循环长开销大","link":"#循环长开销大","children":[]},{"level":3,"title":"单个共享变量","slug":"单个共享变量","link":"#单个共享变量","children":[]}]},{"level":2,"title":"FAQ","slug":"faq","link":"#faq","children":[]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]},{"level":2,"title":"参考","slug":"参考","link":"#参考","children":[]}],"git":{"createdTime":1694501966000,"updatedTime":1694501966000},"readingTime":{"minutes":1.9,"words":569},"filePathRelative":"java/concurrency/cas.md","localizedDate":"August 11, 2023","excerpt":"<p>为了线程间共享数据的安全性，我们引入了锁的机制。不管是<code>synchronized</code>内置锁还是重入锁，在高并发时，对锁的激烈竞争导致的线程等待很大程度上会影响性能。为此，人们想到了一种称为非阻塞同步的方法，这种方式不需要锁。它，就是我们今天要讲的<code>CAS</code>。</p>\\n<h2> CAS</h2>\\n<p>CAS全称<code>Compare And Swape</code>，是一种比较并交换的算法。在硬件层面上，大多数处理器架构中，是已经支持原子化的CAS指令的。在JDK 1.5之后，虚拟机就可以使用这个指令了。</p>\\n<p>CAS包含了<code>3</code>个操作数，它的形式为CAS(V, E, N)。其中V表示要更新的地址，E表示要比较的值，N表示新值。</p>","copyright":{"author":"huhx","license":"MIT"}}');export{e as data};
