import{_ as e,o as a,c as d,d as i}from"./app-57542e83.js";const r={},c=i('<p>注解是众多引入到Java SE5中的重要的语言变化之一。它为我们在代码中添加信息提供了一种形式化的方法，使我们可以在稍后某个时刻非常方便的使用这些数据。今天我们就开始学习一下java中注解的知识。</p><h2 id="注解" tabindex="-1"><a class="header-anchor" href="#注解" aria-hidden="true">#</a> 注解</h2><p>java内置了三种标准注解，以及四种元注解。元注解专职负责注解其他的注解。</p><p>标准注解：@Override、@Deprecated、@Suppresswarnings</p><ul><li><code>@Override</code>：表示当前的方法定义将覆盖超类中的方法。如果你不小心拼写错误，或者方法签名对不上被覆盖的方法，编译器就会发出错误提示。</li><li><code>@Deprecated</code>：如果程序使用了注解为它的元素，那么编译器会发出警告信息。</li><li><code>@Suppresswarnings</code>：关闭不当的编译器警告信息。</li></ul><p>元注解：@Target、@Retention、@Documented、@Inherited。</p><ul><li><code>@Target</code>：表示该注解可以用于什么地方，可选的参数有CONSTRUCTOR、FIELD、LOCAL_VARLABLE、METHOD、PACKAGE、PARAMETER、TYPE</li><li><code>@Retention</code>：表示需要在什么级别保存该注解信息，可选的参数有SOURCE、CLASS、RUNTIME</li><li><code>@Documented</code>：将此注解包含在javadoc中</li><li><code>@Inherited</code>：允许子类继承父类中的注解 |</li></ul><h2 id="faq" tabindex="-1"><a class="header-anchor" href="#faq" aria-hidden="true">#</a> FAQ</h2><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考" aria-hidden="true">#</a> 参考</h2>',10),t=[c];function n(o,h){return a(),d("div",null,t)}const s=e(r,[["render",n],["__file","annotation.html.vue"]]);export{s as default};
